name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'      # run on pushes to any branch
  pull_request:
    branches:
      - '**'      # run on PRs targeting any branch
  workflow_dispatch: {}  # allow manual runs from the Actions tab

permissions:
  contents: write      # Required to push manifest updates back to repo
  packages: write      # Required to push images to GHCR
  pull-requests: read

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.14
        ports:
          - 9200:9200
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Seed Test Data
      run: node tests/seed-test-data.js
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/shopping_test
    
    - name: Run Unit Tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/shopping_test
    
    - name: Start Application
      run: npm start &
      env:
        NODE_ENV: test
        PORT: 3000
        MONGODB_URI: mongodb://localhost:27017/shopping_test
        ELASTICSEARCH_URL: http://localhost:9200
        REDIS_HOST: localhost
        REDIS_PORT: 6379
    
    - name: Wait for Application
      run: npx wait-on http://localhost:3000 -t 30000
    
    - name: Run E2E Tests
      run: npm run test:e2e
      env:
        TEST_URL: http://localhost:3000
        NODE_ENV: test
    
    - name: Generate Coverage Report
      run: npm run test:coverage
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Run Snyk Security Scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build:
    name: Build Artifact
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install production dependencies
      run: npm ci --production
      env:
        # Disable husky in CI for production installs (devDependencies not installed)
        HUSKY: "0"
    
    - name: Create deployment package
      run: |
        mkdir -p deploy
        tar -czf deploy/rocknDogs-${{ github.sha }}.tar.gz \
          --exclude='node_modules' \
          --exclude='.git' \
          --exclude='tests' \
          --exclude='coverage' \
          --exclude='deploy' \
          --exclude='.env*' \
          .
        
        # Also create a "latest" symlink artifact
        cp deploy/rocknDogs-${{ github.sha }}.tar.gz deploy/rocknDogs-latest.tar.gz
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deploy/rocknDogs-${{ github.sha }}.tar.gz
        retention-days: 30
    
    - name: Generate deployment metadata
      run: |
        cat > deploy/metadata.json << EOF
        {
          "version": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "build_number": "${{ github.run_number }}",
          "git_commit": "${{ github.sha }}",
          "git_author": "${{ github.actor }}"
        }
        EOF
    
    - name: Upload metadata
      uses: actions/upload-artifact@v4
      with:
        name: deployment-metadata
        path: deploy/metadata.json

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up QEMU (multi-arch emulation)
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64,amd64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set lowercase repository owner
      id: repo
      run: echo "owner_lc=${OWNER,,}" >> $GITHUB_OUTPUT
      env:
        OWNER: ${{ github.repository_owner }}
    
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ steps.repo.outputs.owner_lc }}/rockndogs
        tags: |
          type=sha,prefix=,format=short
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Output image tags
      run: |
        echo "Image tags pushed:"
        echo "${{ steps.meta.outputs.tags }}"

  update-manifest:
    name: Update K8s Manifest
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update deployment image tag
      run: |
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        NEW_IMAGE="ghcr.io/${OWNER_LC}/rockndogs:${SHORT_SHA}"
        
        echo "Updating k8s/deployment.yaml to use image: ${NEW_IMAGE}"
        
        # Update the image in deployment.yaml
        sed -i.bak "s|image: .*rockndogs.*|image: ${NEW_IMAGE}|g" k8s/deployment.yaml
        
        # Show the diff
        echo "Changes made:"
        git diff k8s/deployment.yaml
    
    - name: Commit and push manifest update
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        if git diff --quiet k8s/deployment.yaml; then
          echo "No changes to commit"
        else
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          git add k8s/deployment.yaml
          git commit -m "chore(deploy): update image to ${SHORT_SHA} [skip ci]"
          git push origin main
          echo "✅ Manifest updated and pushed to main"
        fi

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.rocknDogs.example.com
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
    
    - name: Download metadata
      uses: actions/download-artifact@v4
      with:
        name: deployment-metadata
    
    - name: Simulate deployment
      run: |
        echo "🚀 Deploying to Staging Environment"
        echo "📦 Package: $(ls *.tar.gz)"
        echo "📋 Metadata:"
        cat metadata.json
        
        echo ""
        echo "Deployment steps that would run:"
        echo "1. Upload artifact to staging server"
        echo "2. Extract package: tar -xzf rocknDogs-*.tar.gz"
        echo "3. Install dependencies: npm ci --production"
        echo "4. Run database migrations"
        echo "5. Restart application: pm2 restart rocknDogs"
        echo "6. Health check: curl http://staging.rocknDogs.example.com/health"
        echo ""
        echo "✅ Staging deployment completed!"
    
    # Uncomment this for real SSH deployment:
    # - name: Deploy to Staging Server
    #   uses: appleboy/scp-action@master
    #   with:
    #     host: ${{ secrets.STAGING_HOST }}
    #     username: ${{ secrets.STAGING_USER }}
    #     key: ${{ secrets.STAGING_SSH_KEY }}
    #     source: "rocknDogs-*.tar.gz"
    #     target: "/opt/rocknDogs/releases/"
    
    # - name: Execute deployment script
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.STAGING_HOST }}
    #     username: ${{ secrets.STAGING_USER }}
    #     key: ${{ secrets.STAGING_SSH_KEY }}
    #     script: |
    #       cd /opt/rocknDogs/releases
    #       tar -xzf rocknDogs-*.tar.gz -C /opt/rocknDogs/current
    #       cd /opt/rocknDogs/current
    #       npm ci --production
    #       pm2 restart rocknDogs

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://rocknDogs.example.com
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
    
    - name: Simulate production deployment
      run: |
        echo "🚀 Deploying to Production Environment"
        echo "📦 Package: $(ls *.tar.gz)"
        echo ""
        echo "⚠️  Production deployment requires manual approval"
        echo "Deployment steps that would run:"
        echo "1. Blue-green deployment preparation"
        echo "2. Deploy to green environment"
        echo "3. Run smoke tests"
        echo "4. Switch traffic to green (zero downtime)"
        echo "5. Monitor metrics for 5 minutes"
        echo "6. Mark blue as backup"
        echo ""
        echo "✅ Production deployment completed!"
