name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'      # run on pushes to any branch
  pull_request:
    branches:
      - '**'      # run on PRs targeting any branch
  workflow_dispatch: {}  # allow manual runs from the Actions tab

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.14
        ports:
          - 9200:9200
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Seed Test Data
      run: node tests/seed-test-data.js
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/shopping_test
    
    - name: Run Unit Tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/shopping_test
    
    - name: Start Application
      run: npm start &
      env:
        NODE_ENV: test
        PORT: 3000
    
    - name: Wait for Application
      run: npx wait-on http://localhost:3000 -t 30000
    
    - name: Run E2E Tests
      run: npm run test:e2e
      env:
        TEST_URL: http://localhost:3000
    
    - name: Generate Coverage Report
      run: npm run test:coverage
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Run Snyk Security Scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build:
    name: Build Artifact
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install production dependencies
      run: npm ci --production
    
    - name: Create deployment package
      run: |
        mkdir -p deploy
        tar -czf deploy/rocknDogs-${{ github.sha }}.tar.gz \
          --exclude='node_modules' \
          --exclude='.git' \
          --exclude='tests' \
          --exclude='coverage' \
          --exclude='deploy' \
          --exclude='.env*' \
          .
        
        # Also create a "latest" symlink artifact
        cp deploy/rocknDogs-${{ github.sha }}.tar.gz deploy/rocknDogs-latest.tar.gz
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deploy/rocknDogs-${{ github.sha }}.tar.gz
        retention-days: 30
    
    - name: Generate deployment metadata
      run: |
        cat > deploy/metadata.json << EOF
        {
          "version": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "build_number": "${{ github.run_number }}",
          "git_commit": "${{ github.sha }}",
          "git_author": "${{ github.actor }}"
        }
        EOF
    
    - name: Upload metadata
      uses: actions/upload-artifact@v3
      with:
        name: deployment-metadata
        path: deploy/metadata.json

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t rocknDogs:${{ github.sha }} .
        docker tag rocknDogs:${{ github.sha }} rocknDogs:latest
    
    - name: Save Docker image as artifact
      run: |
        mkdir -p deploy
        docker save rocknDogs:${{ github.sha }} | gzip > deploy/rocknDogs-docker-${{ github.sha }}.tar.gz
    
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: deploy/rocknDogs-docker-${{ github.sha }}.tar.gz
        retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.rocknDogs.example.com
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: deployment-package
    
    - name: Download metadata
      uses: actions/download-artifact@v3
      with:
        name: deployment-metadata
    
    - name: Simulate deployment
      run: |
        echo "üöÄ Deploying to Staging Environment"
        echo "üì¶ Package: $(ls *.tar.gz)"
        echo "üìã Metadata:"
        cat metadata.json
        
        echo ""
        echo "Deployment steps that would run:"
        echo "1. Upload artifact to staging server"
        echo "2. Extract package: tar -xzf rocknDogs-*.tar.gz"
        echo "3. Install dependencies: npm ci --production"
        echo "4. Run database migrations"
        echo "5. Restart application: pm2 restart rocknDogs"
        echo "6. Health check: curl http://staging.rocknDogs.example.com/health"
        echo ""
        echo "‚úÖ Staging deployment completed!"
    
    # Uncomment this for real SSH deployment:
    # - name: Deploy to Staging Server
    #   uses: appleboy/scp-action@master
    #   with:
    #     host: ${{ secrets.STAGING_HOST }}
    #     username: ${{ secrets.STAGING_USER }}
    #     key: ${{ secrets.STAGING_SSH_KEY }}
    #     source: "rocknDogs-*.tar.gz"
    #     target: "/opt/rocknDogs/releases/"
    
    # - name: Execute deployment script
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.STAGING_HOST }}
    #     username: ${{ secrets.STAGING_USER }}
    #     key: ${{ secrets.STAGING_SSH_KEY }}
    #     script: |
    #       cd /opt/rocknDogs/releases
    #       tar -xzf rocknDogs-*.tar.gz -C /opt/rocknDogs/current
    #       cd /opt/rocknDogs/current
    #       npm ci --production
    #       pm2 restart rocknDogs

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://rocknDogs.example.com
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: deployment-package
    
    - name: Simulate production deployment
      run: |
        echo "üöÄ Deploying to Production Environment"
        echo "üì¶ Package: $(ls *.tar.gz)"
        echo ""
        echo "‚ö†Ô∏è  Production deployment requires manual approval"
        echo "Deployment steps that would run:"
        echo "1. Blue-green deployment preparation"
        echo "2. Deploy to green environment"
        echo "3. Run smoke tests"
        echo "4. Switch traffic to green (zero downtime)"
        echo "5. Monitor metrics for 5 minutes"
        echo "6. Mark blue as backup"
        echo ""
        echo "‚úÖ Production deployment completed!"
